
set cut_paste_input [stack 0]
version 12.2 v5
push $cut_paste_input
Group {
 name imageCropDivide
 tile_color 0x5c3d84ff
 note_font_size 25
 note_font_color 0xffffffff
 selected true
 xpos 411
 ypos -125
 addUserKnob {20 User}
 addUserKnob {3 width_max}
 addUserKnob {3 height_max -STARTLINE}
 addUserKnob {3 width_source}
 addUserKnob {3 height_source -STARTLINE}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {22 icd_script l "Copy Setup to ClipBoard" T "\"\"\"\nversion=3\nauthor=Liam Collod\nlast_modified=24/04/2022\npython>2.7\ndependencies=\{\n    nuke=*\n\}\n\n[What]\n\nFrom given maximum dimensions, divide an input image into multiples crops.\nThis a combined script of <cropAndWrite> and <imageCropDivide>.\nMust be executed from a python button knob.\n\n[Use]\n\nMust be executed from a python button knob.\n\n[License]\n\nCopyright 2022 Liam Collod\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\"\"\"\n\nimport logging\nimport math\nimport platform\nimport subprocess\nimport sys\n\ntry:\n    from typing import Tuple, List\nexcept:\n    pass\n\nimport nuke\n\n\ndef setup_logging(name, level):\n    logger = logging.getLogger(name)\n    logger.setLevel(level)\n\n    if not logger.handlers:\n        # create a file handler\n        handler = logging.StreamHandler(stream=sys.stdout)\n        handler.setLevel(logging.DEBUG)\n        # create a logging format\n        formatter = logging.Formatter(\n            '%(asctime)s - [%(levelname)7s] %(name)30s // %(message)s',\n            datefmt='%H:%M:%S'\n        )\n        handler.setFormatter(formatter)\n        # add the file handler to the logger\n        logger.addHandler(handler)\n\n    return logger\n\n\nlogger = setup_logging(\"imageCropDivide.button\", logging.DEBUG)\n\nPASS_METADATA_PATH = \"_crop/passName\"\n\"Metadata key name. Used in write nodes for a flexible pass setup.\"\n\n\nclass CropNode:\n    \"\"\"\n    When creating an instance no node is created in the Nuke nodegraph. Call update()\n    to create the node and access it.\n\n    Args:\n        x_start(int):\n        x_end(int):\n        y_start(int):\n        y_end(int):\n        identifier(str): allow to identify a crop among an array of crop.\n            Must be safe to use in a nuke node name\n        reformat(bool): enable the reformat option on the crop node if true\n    \"\"\"\n\n    def __init__(self, x_start, x_end, y_start, y_end, identifier, reformat=False):\n\n        self.identifier = identifier\n        self.x_start = x_start\n        self.x_end = x_end\n        self.y_start = y_start\n        self.y_end = y_end\n        self.reformat = reformat\n\n        self.node = None\n\n        return\n\n    def __repr__(self):\n        return \"\{\} : x[\{\} -> \{\}] - y[\{\} -> \{\}] //// xy[\{\}, \{\}] rt[\{\}, \{\}]\".format(\n            super(CropNode, self).__repr__(),\n            round(self.x_start, 3), round(self.x_end, 3),\n            round(self.y_start, 3), round(self.y_end, 3),\n            round(self.x, 3), round(self.y, 3),\n            round(self.r, 3), round(self.t, 3)\n        )\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            str: node formatted as .nk format\n        \"\"\"\n        out = \"Crop \{\\n\"\n        out += \" box \{\{\{\} \{\} \{\} \{\}\}\}\\n\".format(self.x, self.y, self.r, self.t)\n        out += \" reformat \{\}\\n\".format(str(self.reformat).lower())\n        out += \"\}\\n\"\n        return out\n\n    @property\n    def r(self):\n        return self.x_start\n\n    @property\n    def t(self):\n        return self.y_start\n\n    @property\n    def x(self):\n        return self.x_end\n\n    @property\n    def y(self):\n        return self.y_end\n\n    def set_name(self, name):\n        \"\"\"\n        Args:\n            name(str):\n        \"\"\"\n        self.node.setName(name)\n        return\n\n    def update(self):\n        \"\"\"\n        Update the Crop Nuke node knobs with the values stored in the class instance.\n        If the node was never created yet, it is created.\n        \"\"\"\n\n        if self.node is None:\n            self.__update = False\n            self.node = nuke.createNode(\"Crop\")\n            self.__update = True\n            assert self.node, \"[CropNode][update] Can't create nuke node \{\}\".format(self)\n\n        self.node[\"box\"].setX(self.x)\n        self.node[\"box\"].setY(self.y)\n        self.node[\"box\"].setR(self.r)\n        self.node[\"box\"].setT(self.t)\n        self.node[\"reformat\"].setValue(self.reformat)\n\n        return\n\n\nclass CropGenerator:\n    \"\"\"\n\n    Args:\n        max_size(Tuple[int, int]): (r, t)\n        source_size(Tuple[int, int]): (r, t)\n\n    Attributes:\n        width_max:\n        height_max:\n        width_source:\n        height_source:\n        crops: ordered list of CropNode instance created\n    \"\"\"\n\n    def __init__(self, max_size, source_size):\n\n        self.width_max = max_size[0]  # type: int\n        self.height_max = max_size[1]  # type: int\n        self.width_source = source_size[0]  # type: int\n        self.height_source = source_size[1]  # type: int\n\n        self.crops = list()  # type: List[CropNode]\n\n        self._generate_crops()\n\n        return\n\n    def _get_crop_coordinates(self, crop_number, x=True):\n        \"\"\"\n        Return a list of ``x`` or ``y``  start/end coordinates for the number of crops\n        specified.\n\n        Args:\n            crop_number(int):\n            x(bool): return ``x`` coordinates if true else ``y``\n\n        Returns:\n            Tuple[Tuple[int, int]]: where ((start, end), ...)\n        \"\"\"\n\n        out = list()\n        c = self.width_source if x else self.height_source\n\n        for i in range(crop_number):\n            start = c / crop_number * i\n            end = c / crop_number * i + (c / crop_number)\n            out.append((start, end))\n\n        return tuple(out)\n\n    def _generate_crops(self):\n        \"\"\"\n        Create the CropNode instance stored in <crops> attribute.\n        These instance still doesn't exist in the Nuke nodegraph.\n        \"\"\"\n\n        width_crops_n = math.ceil(self.width_source / self.width_max)\n        height_crops_n = math.ceil(self.height_source / self.height_max)\n\n        if not width_crops_n or not height_crops_n:\n            raise RuntimeError(\n                \"[_generate_crops] Can't find a number of crop to perform on r(\{\})\"\n                \" or t(\{\}) for the following setup :\\n\"\n                \"max=\{\}x\{\} ; source=\{\}x\{\}\".format(\n                    width_crops_n, height_crops_n, self.width_max, self.height_max,\n                    self.width_source, self.height_source\n                )\n            )\n\n        width_crops = self._get_crop_coordinates(width_crops_n, x=True)\n        height_crops = self._get_crop_coordinates(height_crops_n, x=False)\n\n        for width_i in range(len(width_crops)):\n\n            for height_i in range(len(height_crops)):\n\n                crop = CropNode(\n                    x_start=width_crops[width_i][0],\n                    y_start=height_crops[height_i][0],\n                    x_end=width_crops[width_i][1],\n                    y_end=height_crops[height_i][1],\n                    identifier=\"\{\}x\{\}\".format(width_i, height_i)\n                )\n                self.crops.append(crop)\n                logger.debug(\n                    \"[CropGenerator][_generate_crops] created    \{\}\".format(crop.__repr__())\n                )\n\n            continue\n\n        return\n\n\ndef register_in_clipboard(data):\n    \"\"\"\n    Args:\n        data(str):\n    \"\"\"\n\n    # Check which operating system is running to get the correct copying keyword.\n    if platform.system() == 'Darwin':\n        copy_keyword = 'pbcopy'\n    elif platform.system() == 'Windows':\n        copy_keyword = 'clip'\n    else:\n        raise OSError(\"Current os not supported. Only [Darwin, Windows]\")\n\n    subprocess.run(copy_keyword, universal_newlines=True, input=data)\n    return\n\n\ndef generate_nk(\n        width_max,\n        height_max,\n        width_source,\n        height_source,\n):\n    \"\"\"\n\n    Args:\n        width_max(int):\n        height_max(int):\n        width_source(int):\n        height_source(int):\n\n    Returns:\n        str: .nk formatted string representing the nodegraph\n    \"\"\"\n\n    cg = CropGenerator(\n        (width_max, height_max),\n        (width_source, height_source),\n    )\n\n    out = str()\n    out += \"\"\"set cut_paste_input [stack 0]\nversion 13.1 v3\npush $cut_paste_input\\n\"\"\"\n\n    id_write_master = None\n\n    for i, cropnode in enumerate(cg.crops):\n\n        pos_x = 125 * i\n        pos_y = 125\n\n        out += \"Dot \{\{\\n xpos \{\}\\n ypos \{\}\\n\}\}\\n\".format(pos_x, pos_y)\n        id_last = \"N173200\"\n        out += \"set \{\} [stack 0]\\n\".format(id_last)\n        pos_y += 125\n\n        # CROPNODE\n        cropnode.reformat = True\n        str_cropnode = str(cropnode)[:-2]  # remove the 2 last character \"\}\\n\"\n        str_cropnode += \" name Crop_\{\}_\\n\".format(cropnode.identifier)\n        str_cropnode += \" xpos \{\}\\n ypos \{\}\\n\".format(pos_x, pos_y)\n        str_cropnode += \"\}\\n\"\n        out += str_cropnode\n        pos_y += 125\n\n        # ModifyMetadata node\n        out += \"ModifyMetaData \{\\n\"\n        out += \" metadata \{\{\{\{set \{\} \{\}\}\}\}\}\\n\".format(PASS_METADATA_PATH,\n                                                      cropnode.identifier)\n        out += \" xpos \{\}\\n ypos \{\}\\n\".format(pos_x, pos_y)\n        out += \"\}\\n\"\n        pos_y += 125\n\n        # Write node cloning system\n        if id_write_master:\n            out += \"clone $\{\} \{\{\\n xpos \{\}\\n ypos \{\}\\n\}\}\\n\".format(id_write_master,\n                                                                   pos_x, pos_y)\n            pos_y += 125\n        else:\n            id_write_master = \"C171d00\"\n            out += \"clone node7f6100171d00|Write|21972 Write \{\\n\"\n            out += \" xpos \{\}\\n ypos \{\}\\n\".format(pos_x, pos_y)\n            out += \" file \\\"[metadata \{\}].jpg\\\"\".format(PASS_METADATA_PATH)\n            out += \" file_type jpeg\\n _jpeg_quality 1\\n _jpeg_sub_sampling 4:4:4\\n\"\n            out += \"\}\\n\"\n            out += \"set \{\} [stack 0]\\n\".format(id_write_master)\n\n        out += \"push $\{\}\\n\".format(id_last)\n        continue\n\n    logger.info(\"[generate_nk] Finished.\")\n    return out\n\n\ndef run():\n    \"\"\"\n    \"\"\"\n    logger.info(\"[run] Started.\")\n\n    width_max = nuke.thisNode()[\"width_max\"].getValue()\n    height_max = nuke.thisNode()[\"height_max\"].getValue()\n    width_source = nuke.thisNode()[\"width_source\"].getValue()\n    height_source = nuke.thisNode()[\"height_source\"].getValue()\n\n    assert width_max, \"ValueError: width_max can't be False/None/0\"\n    assert height_max, \"ValueError: height_max can't be False/None/0\"\n    assert width_source, \"ValueError: width_source can't be False/None/0\"\n    assert height_source, \"ValueError: height_source can't be False/None/0\"\n\n    nk_str = generate_nk(\n        width_max=width_max,\n        height_max=height_max,\n        width_source=width_source,\n        height_source=height_source,\n    )\n    register_in_clipboard(nk_str)\n\n    logger.info(\"[run] Finished. Nodegraph copied to clipboard.\")\n    return\n\n\nrun()" +STARTLINE}
 addUserKnob {26 info l " " T "press ctrl+v in the nodegraph after clicking the above button"}
 addUserKnob {20 Info}
 addUserKnob {26 infotext l "" +STARTLINE T "2022 - Liam Collod<br> Visit <a style=\"color:#fefefe;\" href=\"https://github.com/MrLixm/Foundry_Nuke/tree/main/src/transforms/imageCropDivide\">the GitHub repo</a> "}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 versiontext l "" T "version 7"}
}
 Input {
  inputs 0
  name Input1
  xpos 0
 }
 Output {
  name Output1
  xpos 0
  ypos 300
 }
end_group
