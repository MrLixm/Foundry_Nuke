// version 2
//
// References :
// - [2] Ohno, Yoshi (2014). Practical Use and Calculation of CCT and Duv. LEUKOS, 10(1), 47-55. doi:10.1080/15502724.2014.839020
// - [3] https://en.wikipedia.org/wiki/Planckian_locus#Approximation
// - [4] SMPTE Recommended Practice - Derivation of Basic Television Color Equations https://ieeexplore.ieee.org/document/7291155

#define ohno_deltaT float(0.01)


float powsafe(float color, float power){
  // pow() but safe for NaNs/negatives
  return pow(fabs(color), power) * sign(color);
}


float2 convert_CCT_to_uv_Krystek1985(float CCT){
    // Convert the given CCT to CIE 1960 u,v colorspace values using Krystek's method.
    //
    // Krystek's method is an approximation and not intended for accuracy.
    //
    // :param CCT: in kelvin, ~[1000-15000] range
    // --[3]
    float CCT_2 = pow(CCT,2.0f);
    float u = 0.860117757f + 1.54118254f * pow(10.0f,-4.0f) * CCT + 1.28641212f * pow(10.0f,-7.0f) * CCT_2;
    u = u / (1.0f + 8.42420235f * pow(10.0f,-4.0f) * CCT + 7.08145163f * pow(10.0f,-7.0f) * CCT_2);
    float v = 0.317398726f + 4.22806245f * pow(10.0f,-5.0f) * CCT + 4.20481691f * pow(10.0f,-8.0f) * CCT_2;
    v = v / (1.0f - 2.89741816f * pow(10.0f,-5.0f) * CCT + 1.61456053f * pow(10.0f,-7.0f) * CCT_2);
    return float2(u, v);
}


float2 convert_CCT_Duv_to_xy(float CCT, float Duv){
    //  :param CCT: correlated color temperature in kelvin, ~[1000-15000] range
    //  :param Duv: also called "tint" [-0.05-+0.05] range
    //  -- [2]
    float2 uv0 = convert_CCT_to_uv_Krystek1985(CCT);
    float2 uv1 = convert_CCT_to_uv_Krystek1985(CCT + ohno_deltaT);

    float du = uv0.x - uv1.x;
    float dv = uv0.y - uv1.y;

    float hypothenus = sqrt(powsafe(du,2.0f) + powsafe(dv,2.0f));
    float sinTheta = dv / hypothenus;
    float cosTheta = du / hypothenus;

    float u = uv0.x - Duv * sinTheta;
    float v = uv0.y + Duv * cosTheta;

    float u_p = u;
    float v_p = 1.5f * v;

    float x = 9.0f * u_p / (6.0f * u_p - 16.0f * v_p + 12.0f);
    float y = 2.0f * v_p / (3.0f * u_p - 8.0f * v_p + 6.0f);
    return float2(x, y);
}


kernel WhiteBalance : ImageComputationKernel<ePixelWise>
{
    Image<eRead, eAccessPoint, eEdgeClamped> src;
    Image<eWrite> dst;

    param:
        bool u_show_coeffs;
        float u_temperature;
        float u_tint;
        float u_intensity;

    void define(){
        // default values try to match illuminant E
        defineParam(u_temperature, "u_temperature", 5600.0f);
        defineParam(u_tint, "u_tint", -15.5f);
        defineParam(u_intensity, "u_intensity", 1.0f);
    }

    float lerp(float a1, float a2, float amount){
        // linear interpolation between 2 values
        return (1.0f - amount) * a1 + amount * a2;
    }

    void process() {

        // 3000 is an arbitrary scale for the tint parameter to have a more UI friendly range.
        // (actually same as Adobe)
        float2 new_white_xy = convert_CCT_Duv_to_xy(u_temperature, u_tint/3000.0f);

        // --[4] normalise primary matrix algorithm but only with whitepoint
        float Wz = 1.0f - new_white_xy.x - new_white_xy.y;
        float3 W = float3(new_white_xy.x / new_white_xy.y, 1.0f, Wz / new_white_xy.y);

        float4 rgba = src();
        float3 new_rgb(rgba.x, rgba.y, rgba.z);

        if (u_show_coeffs){
            new_rgb.x = W.x;
            new_rgb.y = W.y;
            new_rgb.z = W.z;
        } else {
            new_rgb.x = lerp(rgba.x, new_rgb.x * W.x, u_intensity);
            new_rgb.y = lerp(rgba.y, new_rgb.y * W.y, u_intensity);
            new_rgb.z = lerp(rgba.z, new_rgb.z * W.z, u_intensity);
        }

        dst() = float4(
            new_rgb.x,
            new_rgb.y,
            new_rgb.z,
            rgba.w
        );
    }
};